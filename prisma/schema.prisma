// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  name     String?
  password String

  workInterval  Int? @default(50) @map("work_interval")
  breakInterval Int? @default(10) @map("break_interval")
  intervalCount Int? @default(7) @map("interval_count")

  tasks            Task[]
  timeBlock        TimeBlock[]
  pomodoroSessions PomodoroSession[]

  @@map("user")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  color    String
  duration Int
  order    Int    @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean? @default(false) @map("is_completed")

  user   User            @relation(fields: [userId], references: [id])
  userId String          @map("user_id")
  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  totalSeconds Int      @map("total_seconds")
  isCompleted  Boolean? @default(false) @map("is_completed")

  pomodoroSession   PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)
  pomodoroSessionId String          @map("pomodoro_session_id")

  @@map("pomodoro_round")
}

enum Priority {
  low
  high
  medium
}

////

model Player {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  goals     Goal[]

  @@map("player")
}

model Team {
  id              String @id @default(cuid())
  name            String
  firstTeamGames  Game[] @relation("FirstTeamGames")
  secondTeamGames Game[] @relation("SecondTeamGames")
  Goal            Goal[]
  forTeam         Goal[] @relation("ForTeam")
  toTeam          Goal[] @relation("ToTeam")

  @@map("team")
}

model Game {
  id           String   @id @default(cuid())
  createdDate  DateTime @map("created_date")
  updatedAt    DateTime @updatedAt @map("updated_date")
  firstTeam    Team     @relation("FirstTeamGames", fields: [firstTeamId], references: [id])
  firstTeamId  String   @map("first_team_id")
  secondTeam   Team     @relation("SecondTeamGames", fields: [secondTeamId], references: [id])
  secondTeamId String   @map("secon_team_id")
  Goal         Goal[]   @relation("Game")

  @@map("game")
}

model Goal {
  id         String   @id @default(cuid())
  scoredDate DateTime @map("scored_date")
  player     Player   @relation(fields: [playerId], references: [id])
  playerId   String
  forTeam    Team     @relation("ForTeam", fields: [forTeamId], references: [id])
  forTeamId  String   @map("for_team_id")
  toTeam     Team     @relation("ToTeam", fields: [toTeamId], references: [id])
  toTeamId   String   @map("to_team_id")
  Team       Team?    @relation(fields: [teamId], references: [id])
  teamId     String?  @map("team_id")
  Game       Game     @relation("Game", fields: [gameId], references: [id], onDelete: Cascade)
  gameId     String   @map("game_id")
  count      Int

  @@map("goal")
}
